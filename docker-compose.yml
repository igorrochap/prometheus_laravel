version: '3'
services:
    server:
        container_name: app_nginx
        image: nginx:stable-alpine
        restart: unless-stopped
        tty: true
        ports:
            - "80:80"
            - "443:443"
        volumes:
            - ./:/var/www
            - ./dev/nginx/conf.d/:/etc/nginx/conf.d/
        networks:
            - app_network
        depends_on:
            - app
            - mysql
    app:
        container_name: app_app
        build:
            context: ./dev
            dockerfile: Dockerfile
        restart: unless-stopped
        tty: true
        environment:
            SERVICE_NAME: app
            SERVICE_TAGS: dev
            XDEBUG_MODE: '${APP_XDEBUG_MODE:-off}'
            XDEBUG_CONFIG: '${APP_XDEBUG_CONFIG:-client_host=host.docker.internal}'
        working_dir: /var/www
        networks:
            - app_network
        depends_on:
            - redis
        volumes:
            - ./:/var/www

    mysql:
        image: mysql/mysql-server:8.0
        container_name: app_db
        restart: unless-stopped
        tty: true
        ports:
            - "3306:3306"
        environment:
            MYSQL_ROOT_PASSWORD: '${DB_PASSWORD}'
            MYSQL_ROOT_HOST: "%"
            MYSQL_DATABASE: '${DB_DATABASE}'
            MYSQL_USER: '${DB_USERNAME}'
            MYSQL_PASSWORD: '${DB_PASSWORD}'
            MYSQL_ALLOW_EMPTY_PASSWORD: 1
        volumes:
            - 'db:/var/lib/mysql'
            - ./docker/mysql/master/my.cnf:/etc/mysql/conf.d/mysql.conf.cnf
        networks:
            - app_network
        healthcheck:
            test: [ "CMD", "mysqladmin", "ping", "-p${DB_PASSWORD}" ]
            retries: 3
            timeout: 5s

    redis:
        container_name: app_redis
        image: 'redis:latest'
        restart: 'always'
        command: 'redis-server --save 20 1 --loglevel warning --requirepass ''${REDIS_PASSWORD}'''
        environment:
            REDIS_PORT: '${REDIS_PORT}'
            REDIS_PASSWORD: '${REDIS_PASSWORD}'
        volumes:
            - './:/var/www'
        networks:
            - app_network
networks:
    app_network:
        driver: bridge
volumes:
    db:
        driver: local
